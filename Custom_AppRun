#!/bin/bash
set -e

# ---
# AppRun script for STM32CubeIDE AppImage
#
# Default behavior: Launches the IDE.
# If "wayland" is in the arguments, it attempts to run the Wayland-specific binary.
# also if the appimage is renamed as stm32cubeide_wayland it will launch that as well
# Special flag --get-udev: Installs necessary udev rules for debug probes.
# ---

# 1. Determine the absolute path to the AppImage's root directory
# This is the directory where this AppRun script is located.
APPDIR="$(cd "${0%/*}" && echo "$PWD")"
BIN="${ARGV0:-$0}"
BIN="${BIN#./}"
unset ARGV0

# The stm32cubeide_wayland script just sets a variable that forces xwayland ðŸ¤£
if [ "$BIN" = "stm32cubeide_wayland" ] || [ "$1" = "stm32cubeide_wayland" ]; then
    export GDK_BACKEND=x11
fi

# --- Function to handle udev rule installation ---
install_udev_rules() {
    # The staged scripts are in AppDir/opt/st-scripts/
    scripts_dir="$APPDIR/opt/st-scripts"

    # POSIX shell does not have arrays but has a positional array
    set -- "$scripts_dir"/*-udev-rules-*.sh

    # Check if the scripts directory and scripts xists
    if [ ! -d "$scripts_dir" ]; then
        echo "ERROR: Udev scripts directory not found at '$scripts_dir'." >&2
        exit 1
    elif [ ! -f "$1" ]; then
        echo "No udev rule installation scripts found in '$scripts_dir'." >&2
        echo "They were not included in this package." >&2
        exit 1
    fi

    # check if user has sudo or doas
    if command -v sudo 1>/dev/null; then
        sudocmd="sudo"
    elif command -v doas 1>/dev/null; then
        sudocmd="doas"
    else
        echo "ERROR: You need sudo or doas to use this function." >&2
        exit 1
    fi

    # "Fancy" output to guide the user
    echo "================================================================"
    echo " STM32CubeIDE Hardware Debugger Setup"
    echo "================================================================"
    echo
    echo "This command will install system-wide udev rules required for"
    echo "ST-Link and J-Link debug probes to be recognized by the system."
    echo
    echo "You will be prompted for your password as this requires sudo/doas."
    echo "----------------------------------------------------------------"

    # Loop through and execute each udev installer
    for script do
        if [ -f "$script" ]; then
            echo
            echo "-> Running installer: ${script##*/}"
            # We must use sudo to install system rules
            "$sudocmd" "$script"
        fi
    done

    echo "----------------------------------------------------------------"
    echo "âœ… Udev rules installation process completed."
    echo "You may need to unplug and reconnect your debug probe or run"
    echo "'sudo udevadm control --reload-rules && sudo udevadm trigger'"
    echo "for the changes to take effect immediately."
    echo "================================================================"

    exit 0
}

# --- Main Execution Logic ---

# Check for the special flag as the first argument
if [ "$1" = "--get-udev" ]; then
    install_udev_rules
elif [ -f "$APPDIR"/bin/"$BIN" ]; then
    exec "$APPDIR"/bin/"$BIN" "$@"
elif [ -n "$1" ] && [ -f "$APPDIR"/bin/"$1" ]; then
    BIN="$1"
    shift
    exec "$APPDIR"/bin/"$BIN" "$@"
else
    exec "$APPDIR"/bin/stm32cubeide "$@"
fi
